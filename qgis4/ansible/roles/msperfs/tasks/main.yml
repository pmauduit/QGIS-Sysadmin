- name: ensures python-psycopg2 is available
  apt:
    name: python-psycopg2
    update_cache: yes

- name: clone the ms_perfs repository
  git:
    repo: "{{ ms_perfs.ms_perfs.repo_url }}"
    dest: "/home/{{ user }}/ms_perfs"
    version: "{{ ms_perfs.ms_perfs.version }}"
  register: ms_perfs_git

- name: give the ms_perfs repository to {{ user }}
  file:
    path: "/home/{{ user }}/ms_perfs"
    recurse: yes
    owner: "{{ user }}"
    group: "{{ user }}"
  when: ms_perfs_git.changed

- name: clone the docker-osm repository
  git:
    repo: "{{ ms_perfs.docker_osm.repo_url }}"
    dest: "/home/{{ user }}/ms_perfs/docker-osm"
    version: "{{ ms_perfs.docker_osm.version }}"
  register: ms_perfs_docker_osm_git

- name: give the docker-osm repository to {{ user }}
  file:
    path: "/home/{{ user }}/ms_perfs/docker-osm"
    recurse: yes
    owner: "{{ user }}"
    group: "{{ user }}"
  when: ms_perfs_docker_osm_git.changed

- name: check if OSM data from switzerland have been downloaded
  stat:
    path: "/home/{{ user }}/ms_perfs/docker-osm/settings/country.pbf"
  register: switzerland_data

- name: download OSM data from switzerland
  command: /usr/bin/python pbf_downloader.py switzerland
  args:
    chdir: "/home/{{ user }}/ms_perfs/docker-osm"
  when: switzerland_data.stat.exists == false

- name: give the data to {{ user }}
  file:
    path: "/home/{{ user }}/ms_perfs/docker-osm"
    recurse: yes
    owner: "{{ user }}"
    group: "{{ user }}"
  when: switzerland_data.stat.exists == false

# Note: unfortunately, this won't converge,
# because we do need to launch the database container
# to check if OSM datas have been loaded
# TODO: instead, use a file to "flag" if data have already been imported or not

- name: Launch the docker composition from docker-osm
  docker_compose:
    project_src: "/home/{{ user }}/ms_perfs/docker-osm"
    build: yes
    pull: yes

- name: wait for the docker db container to be up
  wait_for:
    port: 15432
    delay: 10

- name: Verify if the OSM data have already been loaded
  postgresql_query:
    db: gis
    login_host: localhost
    login_port: 15432
    login_user: docker
    login_password: docker
    query: "SELECT pg_database_size('gis');"
  register: query_in_osmdb

- name: Wait for 10 minutes to get data sourced to postgresql
  pause:
    minutes: 10
  when: query_in_osmdb.query_result[0].pg_database_size < 13000000 # 13MB

- name: Stopping the docker composition from docker-osm
  docker_compose:
    project_src: "/home/{{ user }}/ms_perfs/docker-osm"
    stopped: true

- name: Configure Nginx to serve the ms_perfs results
  template:
    src: msperfs_nginx.j2
    dest: /etc/nginx/sites-available/msperfs
    mode: 0644
  notify: restart nginx

- name: create symlink
  file:
    src: /etc/nginx/sites-available/msperfs
    dest: /etc/nginx/sites-enabled/msperfs
    state: link
  notify: restart nginx
